{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","Components/ContactForm/ContactForm.module.css","Components/ContactList/ContactList.module.css","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","Components/ContactForm/ContactForm.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","views/ContactsView.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","fetchContacts","dispatch","a","fetchContactsRequest","axios","get","data","fetchContactsSuccess","fetchContactsError","message","addContacts","contact","addContactsRequest","post","addContactsSuccess","addContactsError","deleteContacts","contactId","deleteContactsRequest","delete","deleteContactsSuccess","deleteContactsError","getAllContacts","state","contacts","items","getFilter","filter","getLoading","loading","getVisibleContacts","createSelector","normFilter","toLowerCase","name","includes","ContactForm","useDispatch","useState","setName","number","setNumber","useSelector","contactsSelectors","handleChange","useCallback","e","target","console","warn","handleSubmit","ev","preventDefault","find","item","alert","contactsOperations","addContact","resetForm","className","s","form","onSubmit","label","input","type","onChange","placeholder","btnAdd","ContactList","isLaodingContacts","useEffect","laoding","map","id","btn","onClick","onDeleteContact","Filter","filterValue","onChangeFilter","filterContacts","ContactsView"],"mappings":"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","file":"static/js/contacts-view.26ee0889.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1hOHS\",\"input\":\"ContactForm_input__1SraT\",\"btnAdd\":\"ContactForm_btnAdd__2ay3B\",\"label\":\"ContactForm_label__1JpaI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"ContactList_contact__12lvQ\",\"btn\":\"ContactList_btn__sKpfF\",\"laoding\":\"ContactList_laoding__2f2nc\"};","\r\n\r\nimport axios from \"axios\";\r\nimport {\r\n   fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n    addContactsRequest,\r\n    addContactsSuccess,\r\n    addContactsError,\r\n    deleteContactsRequest,\r\n    deleteContactsSuccess,\r\n    deleteContactsError,\r\n} from \"./contacts-actions\";\r\n\r\n// axios.defaults.baseURL = \"http://localhost:4040\";\r\n\r\nconst fetchContacts = () => async (dispatch) => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get(\"/contacts\");\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error.message));\r\n  }\r\n   // axios\r\n  //   .get(\"/contacts\")\r\n  //   .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n  //   .catch((error) => dispatch(fetchContactsError(error)));\r\n};\r\n\r\n\r\n\r\n// const addContacts = ({ name, number }) => async (dispatch) => {\r\n//   const contact = {\r\n//     name,\r\n//     number,\r\n//   };\r\nconst addContacts = contact => async (dispatch) => {\r\n  dispatch(addContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.post(\"/contacts\", contact);\r\n    dispatch(addContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactsError(error));\r\n  }\r\n   // axios\r\n  //   .post(\"/contacts\", contact)\r\n  //   .then(({ data }) => dispatch(addContactSuccess(data)))\r\n  //   .catch((error) => dispatch(addContactError(error)));\r\n};\r\n\r\n \r\n  const deleteContacts = (contactId) => async (dispatch) => {\r\n    dispatch(deleteContactsRequest());\r\n\r\n    try {\r\n      await axios.delete(`/contacts/${contactId}`);\r\n      dispatch(deleteContactsSuccess(contactId));\r\n    } catch (error) {\r\n      dispatch(deleteContactsError(error.message));\r\n    }\r\n    // axios\r\n  //   .delete(`/contacts/${contactId}`)\r\n  //   .then(() => dispatch(deleteContactSuccess(contactId)))\r\n  //   .catch((error) => dispatch(deleteContactError(error)));\r\n  };\r\n\r\n \r\n  // eslint-disable-next-line import/no-anonymous-default-export\r\n  export default { fetchContacts, addContacts, deleteContacts };","import { createSelector } from \"reselect\";\r\n\r\nconst getLoading = (state) => state.contacts.loading;\r\n\r\nconst getAllContacts = (state) => state.contacts.items;\r\n\r\nconst getFilter = (state) => state.contacts.filter;\r\n\r\n\r\n\r\n// мемоизация\r\nconst getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normFilter = filter.toLowerCase();\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(normFilter)\r\n    );\r\n  }\r\n);\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n    getLoading,\r\n    getAllContacts,\r\n    getFilter,\r\n    getVisibleContacts\r\n};\r\n","import React, { useState,useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from \"../../redux/contacts\";\r\nimport s from './ContactForm.module.css'\r\n\r\n  \r\nexport default function ContactForm() {\r\n  const dispatch = useDispatch();\r\n    const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n  const contacts = useSelector(contactsSelectors.getAllContacts);\r\n\r\n\r\n    // записывает данные \r\n    const handleChange = useCallback((e) => {\r\n        const { name, value } = e.target;\r\n     \r\n      switch (name) {\r\n        case \"name\":\r\n          setName(value);\r\n          break;\r\n        case \"number\":\r\n          setNumber(value);\r\n          break;\r\n        default:\r\n          console.warn(`Тип поля name - ${name} не обрабатывается`);\r\n      }\r\n    }, []);\r\n     // отправляет данные \r\n    const handleSubmit = useCallback(\r\n    (ev) => {\r\n      ev.preventDefault();\r\n\r\n      const uniqueContact = contacts.find(\r\n        (item) => item.name.toLowerCase() === name.toLowerCase()\r\n      );\r\n      if (uniqueContact) {\r\n        alert(`${name} уже есть в списке ваших контактов`);\r\n        return;\r\n      }\r\n\r\n      dispatch(contactsOperations.addContact({ name, number }));\r\n      resetForm();\r\n    },\r\n    [contacts, dispatch, name, number],\r\n  );\r\n\r\n  // очищает форму после отправки\r\n  const resetForm = () => {\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n  \r\n     \r\n    return (\r\n      <form className={s.form} onSubmit={handleSubmit}>\r\n        <label className={s.label}>\r\n          Name\r\n            <input className={s.input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            onChange={handleChange}\r\n            placeholder=\"Name\"\r\n                       \r\n          />\r\n        </label>\r\n        <label className={s.label} >\r\n          Number\r\n          <input className={s.input}\r\n            type=\"text\"\r\n            name=\"number\"\r\n            value={number}\r\n            onChange={handleChange}\r\n            placeholder=\"000-00-00\"\r\n                      \r\n          />\r\n        </label>\r\n        <button className={s.btnAdd} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n                \r\n      </form>\r\n    \r\n    );\r\n  }\r\n  \r\n//      // записывает данные \r\n//     handleChange = e => {\r\n//         const { name, value } = e.target;\r\n//         this.setState({ [name]: value });\r\n//     };\r\n//    // отправляет данные \r\n//   handleSubmit = (ev) => {\r\n//     ev.preventDefault();\r\n//     const { name } = this.state;\r\n//     const { contacts } = this.props;\r\n\r\n//     const uniqueContact = contacts.find(\r\n//       (item) => item.name.toLowerCase() === name.toLowerCase()\r\n//     );\r\n//     if (uniqueContact) {\r\n//       alert(`${name} уже есть в списке ваших контактов`);\r\n//       return;\r\n//     }\r\n\r\n//     this.props.onSubmit(this.state);\r\n//     this.resetForm();\r\n//     };\r\n//      // очищает форму после отправки\r\n//   resetForm = () => {\r\n//     this.setState({\r\n//       name: \"\",\r\n//       number: \"\",\r\n//     });\r\n//   };\r\n\r\n//     render() {\r\n//         const { name, number } = this.state;\r\n//         return (\r\n//             <form className={s.form} onSubmit={this.handleSubmit}>\r\n//                 <label className={s.label}>\r\n//                     Name\r\n//                      <input className={s.input} \r\n//                      type=\"text\"\r\n//                         name=\"name\"\r\n//                         value={name}\r\n//                 onChange={this.handleChange}\r\n//                 placeholder=\"Name\"\r\n                       \r\n//                     />\r\n//                 </label>\r\n//                 <label className={s.label} >\r\n//                     Number\r\n//           <input className={s.input}\r\n//                         type=\"text\"\r\n//                         name=\"number\"\r\n//                         value={number}\r\n//                         onChange={this.handleChange}\r\n//                         placeholder=\"000-00-00\"\r\n                      \r\n//                     />\r\n//                 </label>\r\n//                 <button className={s.btnAdd} type=\"submit\">\r\n//                     Add contact\r\n//         </button>\r\n                \r\n//             </form>\r\n            \r\n\r\n//         )\r\n//     }\r\n// }\r\n// const mapStateToProps = (state) => ({\r\n//   contacts: contactsSelectors.getAllContacts(state),\r\n// });\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   onSubmit: (contact) => dispatch(contactsOperations.addContacts(contact)),\r\n// });\r\n    \r\n","\r\n\r\nimport { useEffect} from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n import { contactsOperations, contactsSelectors } from \"../../redux/contacts\";\r\nimport s from './ContactList.module.css'\r\n\r\n\r\nexport default function ContactList() {\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(contactsSelectors.getVisibleContacts);\r\n  const isLaodingContacts = useSelector(contactsSelectors.getLoading);\r\n\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.fetchContacts());\r\n  }, [dispatch]);\r\n\r\n   const onDeleteContact = (id) => {\r\n    dispatch(contactsOperations.deleteContacts(id), []);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isLaodingContacts && <h1 className={s.laoding}>Загружаем....</h1>}\r\n      <ul>\r\n        {contacts.map(({ id, name, number }) => (\r\n          <li className={s.contact} key={id}>\r\n            <p>{name}: </p>\r\n            <p>{number}</p>\r\n            <button className={s.btn}\r\n              type=\"button\"\r\n              onClick={() => onDeleteContact(id)}\r\n            >\r\n              Delete\r\n          </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n// import { connect } from \"react-redux\";\r\n// import PropTypes from \"prop-types\";\r\n// import React, { Component } from \"react\";\r\n// import { contactsOperations, contactsSelectors } from \"../../redux/contacts\";\r\n// import s from './ContactList.module.css'\r\n\r\n// class ContactList extends Component {\r\n//   componentDidMount() {\r\n//     this.props.fetchContacts();\r\n//   }\r\n//   render() {\r\n//     const { contacts, onDeleteContact, isLaodingContacts } = this.props;\r\n//   return (\r\n//     <>\r\n//        {isLaodingContacts && <h1 className={s.laoding}>Загружаем....</h1>}\r\n//     <ul>\r\n//       {contacts.map(({ id, name, number }) => (\r\n//         <li className={s.contact} key={id}>\r\n//               <p>{name}: </p>\r\n//               <p>{number}</p>\r\n//           <button className={s.btn}\r\n//             type=\"button\"\r\n//             onClick={() => onDeleteContact(id)}\r\n//           >\r\n//             Delete\r\n//           </button>\r\n//         </li>\r\n//       ))}\r\n//       </ul>\r\n//       </>\r\n//   );\r\n// }\r\n//     }\r\n\r\n// ContactList.propTypes = {\r\n//   contacts: PropTypes.array.isRequired,\r\n//   onDeleteContact: PropTypes.func.isRequired,\r\n// };\r\n\r\n// const { getLoading, getVisibleContacts } = contactsSelectors;\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   isLaodingContacts: getLoading(state),\r\n//   contacts: getVisibleContacts(state),\r\n// });\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   onDeleteContact: (id) => dispatch(contactsOperations.deleteContacts(id)),\r\n//   fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n// });\r\n    \r\n// export default connect(mapStateToProps,mapDispatchToProps) (ContactList);","import React, {useCallback} from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport s from '../ContactForm/ContactForm.module.css'\r\nimport { filterContacts } from '../../redux/contacts';\r\nimport  {contactsSelectors}  from '../../redux/contacts';\r\n\r\nexport default function Filter() {\r\n  const dispatch = useDispatch();\r\n  const filterValue = useSelector(contactsSelectors.getFilter);\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const onChangeFilter = useCallback((ev) => dispatch(filterContacts(ev.target.value))\r\n\r\n  );\r\n\r\n  return (\r\n    <label className={s.label}>\r\n      Search for contacts by name\r\n      <input  className={s.input}\r\n        type=\"text\"\r\n        value={filterValue}\r\n        onChange={onChangeFilter}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React from 'react'\r\n// import { connect } from 'react-redux'\r\n// import PropTypes from 'prop-types';\r\n// import s from '../ContactForm/ContactForm.module.css'\r\n// import { filterContacts } from '../../redux/contacts/contacts-actions';\r\n\r\n\r\n// const Filter = ({ filterValue, onChangeFilter }) => {\r\n//   return (\r\n//     <label className={s.label}>\r\n//       Search for contacts by name\r\n//       <input  className={s.input}\r\n//         type=\"text\"\r\n//         value={filterValue}\r\n//         onChange={onChangeFilter}\r\n//       />\r\n//     </label>\r\n//   );\r\n// }\r\n\r\n// Filter.propTypes = {\r\n//   filterValue: PropTypes.string.isRequired,\r\n//   onChangeFilter: PropTypes.func.isRequired,\r\n// };\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   filterValue: state.contacts.filter,\r\n// });\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   onChangeFilter: (ev) => dispatch(filterContacts(ev.target.value)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from \"react\";\r\nimport ContactForm from \"../Components/ContactForm\";\r\nimport ContactList from \"../Components/ContactList\";\r\nimport Filter from \"../Components/Filter\";\r\n\r\nconst ContactsView = () => {\r\n  return (\r\n    <>\r\n      <h1>My Phonebook</h1>\r\n      <ContactForm />\r\n      <Filter />\r\n      <ContactList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactsView;"],"sourceRoot":""}