{"version":3,"sources":["Components/ContactForm/ContactForm.module.css","Components/ContactList/ContactList.module.css","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","Components/ContactForm/ContactForm.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","views/ContactsView.js"],"names":["module","exports","dispatch","a","fetchContactsRequest","axios","get","data","fetchContactsSuccess","fetchContactsError","message","contact","addContactsRequest","post","addContactsSuccess","addContactsError","contactId","deleteContactsRequest","delete","deleteContactsSuccess","deleteContactsError","getAllContacts","state","contacts","items","getFilter","filter","getLoading","loading","getVisibleContacts","createSelector","normFilter","toLowerCase","name","includes","ContactForm","number","handleChange","e","target","value","setState","handleSubmit","ev","preventDefault","props","find","item","alert","onSubmit","resetForm","this","className","s","form","label","input","type","onChange","placeholder","btnAdd","Component","connect","contactsSelectors","contactsOperations","ContactList","fetchContacts","onDeleteContact","isLaodingContacts","laoding","map","id","btn","onClick","filterValue","onChangeFilter","filterContacts","ContactsView"],"mappings":"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","file":"static/js/contacts-view.f8d78700.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__73DKR\",\"input\":\"ContactForm_input__3isdD\",\"btnAdd\":\"ContactForm_btnAdd__1F0RD\",\"label\":\"ContactForm_label__LWiyL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"ContactList_contact__I0_ol\",\"btn\":\"ContactList_btn__3lRjN\",\"laoding\":\"ContactList_laoding__1HrOm\"};","\r\n\r\nimport axios from \"axios\";\r\nimport {\r\n   fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n    addContactsRequest,\r\n    addContactsSuccess,\r\n    addContactsError,\r\n    deleteContactsRequest,\r\n    deleteContactsSuccess,\r\n    deleteContactsError,\r\n} from \"./contacts-actions\";\r\n\r\n// axios.defaults.baseURL = \"http://localhost:4040\";\r\n\r\nconst fetchContacts = () => async (dispatch) => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get(\"/contacts\");\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error.message));\r\n  }\r\n   // axios\r\n  //   .get(\"/contacts\")\r\n  //   .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n  //   .catch((error) => dispatch(fetchContactsError(error)));\r\n};\r\n\r\n\r\n\r\n// const addContacts = ({ name, number }) => async (dispatch) => {\r\n//   const contact = {\r\n//     name,\r\n//     number,\r\n//   };\r\nconst addContacts = contact => async (dispatch) => {\r\n  dispatch(addContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.post(\"/contacts\", contact);\r\n    dispatch(addContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactsError(error));\r\n  }\r\n   // axios\r\n  //   .post(\"/contacts\", contact)\r\n  //   .then(({ data }) => dispatch(addContactSuccess(data)))\r\n  //   .catch((error) => dispatch(addContactError(error)));\r\n};\r\n\r\n \r\n  const deleteContacts = (contactId) => async (dispatch) => {\r\n    dispatch(deleteContactsRequest());\r\n\r\n    try {\r\n      await axios.delete(`/contacts/${contactId}`);\r\n      dispatch(deleteContactsSuccess(contactId));\r\n    } catch (error) {\r\n      dispatch(deleteContactsError(error.message));\r\n    }\r\n    // axios\r\n  //   .delete(`/contacts/${contactId}`)\r\n  //   .then(() => dispatch(deleteContactSuccess(contactId)))\r\n  //   .catch((error) => dispatch(deleteContactError(error)));\r\n  };\r\n\r\n \r\n  // eslint-disable-next-line import/no-anonymous-default-export\r\n  export default { fetchContacts, addContacts, deleteContacts };","import { createSelector } from \"reselect\";\r\n\r\nconst getLoading = (state) => state.contacts.loading;\r\n\r\nconst getAllContacts = (state) => state.contacts.items;\r\n\r\nconst getFilter = (state) => state.contacts.filter;\r\n\r\n\r\n\r\n// мемоизация\r\nconst getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normFilter = filter.toLowerCase();\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(normFilter)\r\n    );\r\n  }\r\n);\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n    getLoading,\r\n    getAllContacts,\r\n    getFilter,\r\n    getVisibleContacts\r\n};\r\n","import React, { Component } from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport { contactsOperations, contactsSelectors } from \"../../redux/contacts\";\r\nimport s from './ContactForm.module.css'\r\n\r\nclass ContactForm extends Component {\r\n    state = {\r\n        name: \"\",\r\n        number: \"\",\r\n  };\r\n     // записывает данные \r\n    handleChange = e => {\r\n        const { name, value } = e.target;\r\n        this.setState({ [name]: value });\r\n    };\r\n   // отправляет данные \r\n  handleSubmit = (ev) => {\r\n    ev.preventDefault();\r\n    const { name } = this.state;\r\n    const { contacts } = this.props;\r\n\r\n    const uniqueContact = contacts.find(\r\n      (item) => item.name.toLowerCase() === name.toLowerCase()\r\n    );\r\n    if (uniqueContact) {\r\n      alert(`${name} уже есть в списке ваших контактов`);\r\n      return;\r\n    }\r\n\r\n    this.props.onSubmit(this.state);\r\n    this.resetForm();\r\n    };\r\n     // очищает форму после отправки\r\n  resetForm = () => {\r\n    this.setState({\r\n      name: \"\",\r\n      number: \"\",\r\n    });\r\n  };\r\n\r\n    render() {\r\n        const { name, number } = this.state;\r\n        return (\r\n            <form className={s.form} onSubmit={this.handleSubmit}>\r\n                <label className={s.label}>\r\n                    Name\r\n                     <input className={s.input} \r\n                     type=\"text\"\r\n                        name=\"name\"\r\n                        value={name}\r\n                onChange={this.handleChange}\r\n                placeholder=\"Name\"\r\n                       \r\n                    />\r\n                </label>\r\n                <label className={s.label} >\r\n                    Number\r\n          <input className={s.input}\r\n                        type=\"text\"\r\n                        name=\"number\"\r\n                        value={number}\r\n                        onChange={this.handleChange}\r\n                        placeholder=\"000-00-00\"\r\n                      \r\n                    />\r\n                </label>\r\n                <button className={s.btnAdd} type=\"submit\">\r\n                    Add contact\r\n        </button>\r\n                \r\n            </form>\r\n            \r\n\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  contacts: contactsSelectors.getAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSubmit: (contact) => dispatch(contactsOperations.addContacts(contact)),\r\n});\r\n    \r\nexport default connect(mapStateToProps,mapDispatchToProps) (ContactForm);","import { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport React, { Component } from \"react\";\r\nimport { contactsOperations, contactsSelectors } from \"../../redux/contacts\";\r\nimport s from './ContactList.module.css'\r\n\r\nclass ContactList extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n  render() {\r\n    const { contacts, onDeleteContact, isLaodingContacts } = this.props;\r\n  return (\r\n    <>\r\n       {isLaodingContacts && <h1 className={s.laoding}>Загружаем....</h1>}\r\n    <ul>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li className={s.contact} key={id}>\r\n              <p>{name}: </p>\r\n              <p>{number}</p>\r\n          <button className={s.btn}\r\n            type=\"button\"\r\n            onClick={() => onDeleteContact(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n      </ul>\r\n      </>\r\n  );\r\n}\r\n    }\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst { getLoading, getVisibleContacts } = contactsSelectors;\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isLaodingContacts: getLoading(state),\r\n  contacts: getVisibleContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDeleteContact: (id) => dispatch(contactsOperations.deleteContacts(id)),\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n});\r\n    \r\nexport default connect(mapStateToProps,mapDispatchToProps) (ContactList);","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types';\r\nimport s from '../ContactForm/ContactForm.module.css'\r\nimport { filterContacts } from '../../redux/contacts/contacts-actions';\r\n\r\n\r\nconst Filter = ({ filterValue, onChangeFilter }) => {\r\n  return (\r\n    <label className={s.label}>\r\n      Search for contacts by name\r\n      <input  className={s.input}\r\n        type=\"text\"\r\n        value={filterValue}\r\n        onChange={onChangeFilter}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  filterValue: PropTypes.string.isRequired,\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filterValue: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChangeFilter: (ev) => dispatch(filterContacts(ev.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from \"react\";\r\nimport ContactForm from \"../Components/ContactForm\";\r\nimport ContactList from \"../Components/ContactList\";\r\nimport Filter from \"../Components/Filter\";\r\n\r\nconst ContactsView = () => {\r\n  return (\r\n    <>\r\n      <h1>My Phonebook</h1>\r\n      <ContactForm />\r\n      <Filter />\r\n      <ContactList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactsView;"],"sourceRoot":""}