{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/auth/auth-operations.js","redux/auth/auth-selectors.js","redux/auth/auth-reducer.js","redux/contacts/contacts-reducer.js","redux/auth/auth-actions.js","redux/store.js","routes.js","Components/Navigation/Navigation.js","Components/AuthNav/AuthNav.js","images/ava.jpg","Components/UserMenu/UserMenu.js","Components/AppBar/AppBar.js","Components/PrivateRoute/PrivateRoute.js","Components/PublicRoute/PublicRoute.js","App.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactsRequest","addContactsSuccess","addContactsError","deleteContactsRequest","deleteContactsSuccess","deleteContactsError","filterContacts","axios","defaults","baseURL","token","headers","common","Authorization","register","credentials","dispatch","a","registerRequest","post","response","console","log","data","registerSuccess","registerError","message","login","loginRequest","loginSuccess","loginError","logout","logoutRequest","logoutSuccess","logoutError","getCurrentUser","getState","storageToken","auth","getCurrentUserRequest","get","getCurrentUserSuccess","getCurrentUserError","getIsAuthenticated","state","isAuthenticated","getUserName","user","name","initialUserState","email","createReducer","_","payload","combineReducers","items","filter","id","loading","authPersistConfig","key","storage","whitelist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","authReducer","contacts","contactsReducer","devTools","process","persistor","persistStore","style","link","display","textDecoration","padding","fontWeight","color","activeLink","connect","authSelectors","to","routes","exact","activeStyle","form","AuthNav","styles","avatar","borderRadius","btn","marginLeft","mapDispatchToProps","onLogout","authOperations","ava","src","alt","width","type","onClick","blok","justifyContent","alignItems","minHeight","backgroundColor","borderBottom","Component","component","redirectTo","routeProps","render","props","restricted","HomeView","lazy","ContactsView","LoginView","RegistrationView","App","this","onGetCurrentUser","className","fallback","path","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.31fdb31f.chunk.js","sourcesContent":["\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction(\"contacts/fetchContactsRequest\");\r\nexport const fetchContactsSuccess = createAction(\"contacts/fetchContactsSuccess\");\r\nexport const fetchContactsError = createAction(\"contacts/fetchContactsError\");\r\n\r\n\r\nexport const addContactsRequest = createAction('contacts/addContactsRequest');\r\nexport const addContactsSuccess = createAction('contacts/addContactsSuccess');\r\nexport const addContactsError = createAction('contacts/addContactsError');\r\n\r\n\r\nexport const deleteContactsRequest = createAction('contacts/deleteContactsRequest');\r\nexport const deleteContactsSuccess = createAction('contacts/deleteContactsSuccess');\r\nexport const deleteContactsError = createAction('contacts/deleteContactsError');\r\n\r\nexport const filterContacts = createAction('contacts/filterContacts');\r\n\r\n\r\n\r\n","import axios from 'axios'\r\nimport {\r\n    registerRequest,\r\n    registerSuccess,\r\n    registerError,\r\n    loginRequest,\r\n    loginSuccess,\r\n    loginError,\r\n    logoutRequest,\r\n    logoutSuccess,\r\n    logoutError,\r\n     getCurrentUserRequest,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n} from './auth-actions.js'\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n    set(token) {\r\n        axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n    },\r\n    unset() {\r\n        axios.defaults.headers.common.Authorization = '';\r\n    },\r\n};\r\n\r\n// POST ​/users​/signup Создать нового пользователя\r\nconst register =( credentials) => async (dispatch) => {\r\n    dispatch(registerRequest());\r\n    try {\r\n        const response = await axios.post('/users/signup', credentials);\r\n\r\n        console.log(response);\r\n\r\n        token.set(response.data.token);\r\n        dispatch(registerSuccess(response.data));\r\n        \r\n    } catch (error) {\r\n        dispatch(registerError(error.message));\r\n        \r\n    }\r\n};\r\n\r\n// POST ​/users​/login Залогинить пользователя\r\nconst login= (credentials) => async (dispatch) => {\r\n    dispatch(loginRequest());\r\n    try {\r\n        const response = await axios.post('/users/login', credentials);\r\n         token.set(response.data.token);\r\n        dispatch(loginSuccess(response.data));\r\n\r\n        \r\n    } catch (error) {\r\n        dispatch(loginError(error.message));\r\n        \r\n    }\r\n};\r\n\r\n// POST ​/users​/logout Разлогинить пользователя\r\nconst logout= () => async (dispatch) => {\r\n    dispatch(logoutRequest());\r\n    try {\r\n        await axios.post('/users/logout');\r\n        // token.unset();\r\n        dispatch(logoutSuccess())\r\n\r\n        \r\n    } catch (error) {\r\n        dispatch(logoutError(error.message))\r\n        \r\n    }\r\n};\r\n\r\n// GET​/users​/current\r\n// Получить информацию о текущем пользователе\r\nconst getCurrentUser = () => async (dispatch, getState) => {\r\n    const {\r\n        auth: { token: storageToken },\r\n    } = getState()\r\n\r\n    if (!storageToken) {\r\n        return;\r\n    }\r\n    token.set(storageToken);\r\n\r\n    dispatch(getCurrentUserRequest())\r\n    try {\r\n        const response = await axios.get('users/current');\r\n      \r\n        dispatch(getCurrentUserSuccess(response.data));\r\n    } catch (error) {\r\n        dispatch(getCurrentUserError(error.message));\r\n    }\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n    register,\r\n    login,\r\n    logout,\r\n    getCurrentUser\r\n};\r\n\r\n\r\n","const getIsAuthenticated = state => state.auth.isAuthenticated;\r\nconst getUserName = state => state.auth.user.name;\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n    getIsAuthenticated,\r\n    getUserName\r\n};","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport {\r\n    \r\n    registerSuccess,\r\n    registerError,\r\n    loginSuccess,\r\n    loginError,\r\n    logoutSuccess,\r\n    getCurrentUserSuccess,\r\n    getCurrentUserError\r\n\r\n} from './auth-actions'\r\n\r\n\r\nconst initialUserState = { name: null, email: null };\r\n\r\n\r\nconst user = createReducer(initialUserState, {\r\n    [registerSuccess]: (_, {payload}) => payload.user,\r\n    [loginSuccess]: (_, {payload}) => payload.user,\r\n    [logoutSuccess]: () => initialUserState,\r\n    [getCurrentUserSuccess]: (_, {payload}) => payload,\r\n    \r\n});\r\n\r\nconst token = createReducer(null, {\r\n    [registerSuccess]: (_, { payload }) => payload.token,\r\n    [loginSuccess]: (_, { payload }) => payload.token,\r\n    [loginSuccess]: () => null,\r\n});\r\n\r\n// const error = createReducer(null, {\r\n//     [autActions.registerError]: (_, {payload}) => payload.error,\r\n// });\r\n const isAuthenticated = createReducer(false, {\r\n  [registerSuccess]: () => true,\r\n  [loginSuccess]: () => true,\r\n  [getCurrentUserSuccess]: () => true,\r\n  [registerError]: () => false,\r\n  [loginError]: () => false,\r\n  [getCurrentUserError]: () => false,\r\n  [logoutSuccess]: () => false,\r\n});\r\nexport default combineReducers({\r\n    user,\r\n    token,\r\n    isAuthenticated,\r\n});","\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux'\r\nimport {\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n    addContactsRequest,\r\n    addContactsSuccess,\r\n    addContactsError,\r\n    deleteContactsRequest,\r\n    deleteContactsSuccess,\r\n    deleteContactsError,\r\n    filterContacts,\r\n  \r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n    [fetchContactsSuccess]: (_, { payload }) => payload,\r\n    [addContactsSuccess]: (state, { payload }) => [...state, payload],\r\n    [deleteContactsSuccess]: (state, { payload }) => state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [filterContacts]: (_, { payload }) => payload,\r\n});\r\n\r\n// только на Request ставим true\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true, \r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactsRequest]: () => true,\r\n  [addContactsSuccess]: () => false,\r\n  [addContactsError]: () => false,\r\n  [deleteContactsRequest]: () => true,\r\n  [deleteContactsSuccess]: () => false,\r\n  [deleteContactsError]: () => false,\r\n});\r\n\r\nexport default combineReducers({ items, filter, loading});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\n// регистрация\r\nexport const registerRequest = createAction('auth/registerRequest');\r\nexport const registerSuccess = createAction('auth/registerSuccess');\r\nexport const registerError = createAction('auth/registerError');\r\n\r\n\r\n// Логин\r\nexport const loginRequest = createAction('auth/loginRequest');\r\nexport const loginSuccess = createAction('auth/loginSuccess');\r\nexport const loginError = createAction('auth/loginError');\r\n\r\nexport const logoutRequest = createAction('auth/logoutRequest');\r\nexport const logoutSuccess = createAction('auth/logoutSuccess');\r\nexport const logoutError = createAction('auth/logoutError');\r\n\r\n\r\nexport const getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\r\nexport const getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\r\nexport const getCurrentUserError = createAction('auth/getCurrentUserError');","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from \"redux-logger\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\n// import persistReducer from 'redux-persist/es/persistReducer';\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nimport contactsReducer from \"./contacts/contacts-reducer\";\r\nimport  authReducer from \"./auth/auth-reducer\";\r\n// // удаляем persistStore\r\n\r\nconst authPersistConfig = {\r\n  key: \"auth\",\r\n  storage,\r\n  whitelist: [\"token\"],\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions:\r\n        [FLUSH,\r\n          REHYDRATE,\r\n          PAUSE,\r\n          PERSIST,\r\n          PURGE,\r\n          REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n     auth: persistReducer(authPersistConfig, authReducer),\r\n    contacts: contactsReducer,\r\n   \r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\nconst persistor = persistStore(store);\r\n\r\n\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default  {store, persistor};\r\n","// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n  home: \"/\",\r\n  contacts: \"/contacts\",\r\n    registration: \"/register\",\r\n    login: \"/login\",\r\n};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport routes from '../../routes';\r\nimport { connect } from 'react-redux'\r\nimport {authSelectors} from '../../redux/auth';\r\n\r\nconst style = {\r\n  link: {\r\n    display: \"inline-block\",\r\n    textDecoration: \"none\",\r\n    padding: 12,\r\n    fontWeight: 900,\r\n    color: \"#ffffff\",\r\n  },\r\n  activeLink: {\r\n      color: \"red\",\r\n  },\r\n};\r\n\r\n\r\nconst Navigation = ({ isAuthenticated }) => {\r\n    return (\r\n        <nav>\r\n            <NavLink\r\n                to={routes.home}\r\n                exact\r\n                 style={style.link}\r\n                activeStyle={style.activeLink}\r\n            >\r\n                HOME\r\n                </NavLink>\r\n            {isAuthenticated && (\r\n                <NavLink\r\n                    to={routes.contacts}\r\n                    exact\r\n                     style={style.link}\r\n                activeStyle={style.activeLink}\r\n                >\r\n                   PHONEBOOK\r\n                </NavLink>\r\n            )}\r\n        </nav>\r\n    );\r\n};\r\nconst mapDispatchToProps = (state) => ({\r\n    isAuthenticated: authSelectors.getIsAuthenticated(state)\r\n})\r\n\r\nexport default connect(mapDispatchToProps) (Navigation);\r\n","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport routes from '../../routes'\r\n\r\nconst style = {\r\n  form: {\r\n    display: \"blok\",\r\n    textDecoration: \"none\",\r\n    padding: 12,\r\n    fontWeight: 700,\r\n    color: \"#ffffff\",\r\n  },\r\n  activeLink: {\r\n     color: \"red\",\r\n  },\r\n};\r\n\r\n\r\nconst AuthNav = () => {\r\n    return (\r\n        <nav>\r\n            <NavLink\r\n                to={routes.registration}\r\n                exact\r\n                style={style.form}\r\n                activeStyle={style.activeLink}\r\n            >\r\n                REGISTRATION\r\n                </NavLink>\r\n            <NavLink\r\n                to={routes.login}\r\n                exact\r\n                 style={style.form}\r\n                activeStyle={style.activeLink}\r\n            >\r\n                LOGIN\r\n            </NavLink>\r\n            \r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default AuthNav;\r\n","export default __webpack_public_path__ + \"static/media/ava.ad595ae0.jpg\";","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { authOperations, authSelectors } from \"../../redux/auth\";\r\nimport ava from '../../images/ava.jpg'\r\n\r\nconst styles = {\r\navatar: {\r\n      borderRadius: \"50%\",\r\n  },\r\n  btn: {\r\n    borderRadius: \"10%\",\r\n     marginLeft: 10,\r\n  }\r\n}\r\n\r\nconst UserMenu = ({ avatar, name, onLogout }) => (\r\n    <div>\r\n        <img src={avatar} alt=\"\" width=\"40\" style={styles.avatar}\r\n         />\r\n        <span>Welcome, {name}</span>\r\n        <button type=\"button\" onClick={onLogout} style={styles.btn}>Logout</button>\r\n    </div>\r\n\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  name: authSelectors.getUserName(state),\r\n  avatar: ava,\r\n});\r\nconst mapDispatchToProps = {\r\n onLogout: authOperations.logout,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (UserMenu);\r\n","import React from 'react';\r\nimport Navigation from '../Navigation';\r\nimport AuthNav from '../AuthNav';\r\nimport UserMenu from '../UserMenu';\r\nimport { connect } from 'react-redux'\r\nimport {authSelectors} from '../../redux/auth'\r\n\r\n\r\nconst style = {\r\n    blok: {\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        alignItems: \"center\",\r\n        minHeight: 60,\r\n        backgroundColor: \"rgb(40, 215, 238, 0.384)\",\r\n        borderBottom: \"1px solid\",\r\n         width: \"100%\",\r\n\r\n\r\n    },\r\n};\r\n     \r\n\r\nconst AppBar = ({isAuthenticated}) => (\r\n    <header  style={style.blok}>\r\n        <Navigation />\r\n       {isAuthenticated ? <UserMenu /> : <AuthNav />}\r\n   </header>\r\n);\r\n    \r\nconst mapStateToProps = (state) => ({\r\n    isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n    \r\n});\r\n\r\n\r\nexport default connect(mapStateToProps)(AppBar);\r\n","  \r\nimport React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { authSelectors } from \"../../redux/auth\";\r\n\r\n/**\r\n * - Если маршрут приватный и пользователь залогинен, рендерит компонент\r\n * - В противном случае рендерит Redirect на /login\r\n */\r\nconst PrivateRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={(props) =>\r\n      isAuthenticated ? <Component {...props} /> : <Redirect to={redirectTo} />\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { authSelectors } from \"../../redux/auth\";\r\n\r\n/**\r\n * - Если маршрут ограниченный, и пользователь залогинен, рендерит редирект на /todos\r\n * - В противном случае рендерит компонент\r\n */\r\nconst PublicRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={(props) =>\r\n      isAuthenticated && routeProps.restricted ? (\r\n        <Redirect to={redirectTo} />\r\n      ) : (\r\n        <Component {...props} />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PublicRoute);","import React, { Component, lazy, Suspense } from \"react\";\r\nimport {  Switch } from 'react-router-dom';\r\nimport './App.css';\r\nimport AppBar from \"./Components/AppBar/AppBar\";\r\nimport { PrivateRoute } from './Components/PrivateRoute';\r\nimport { PublicRoute } from './Components/PublicRoute';\r\n// import HomeView from \"./views/HomeView\";\r\n// import RegistrationView from \"./views/RegistrationView\";\r\n// import LoginView from \"./views/LoginView\";\r\n// import ContactsView from \"./views/ContactsView\";\r\n\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport {authOperations} from \"./redux/auth\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\n\r\nconst HomeView = lazy(() =>\r\n  import(\"./views/HomeView.js\" /* webpackChunkName: \"home-view\" */)\r\n);\r\nconst ContactsView = lazy(() =>\r\n  import(\"./views/ContactsView.js\" /* webpackChunkName: \"contacts-view\" */)\r\n);\r\nconst LoginView = lazy(() =>\r\n  import(\"./views/LoginView.js\" /* webpackChunkName: \"login-view\" */)\r\n);\r\nconst RegistrationView = lazy(() =>\r\n  import(\r\n    \"./views/RegistrationView.js\" /* webpackChunkName: \"registration-view\" */\r\n  )\r\n);\r\n\r\n\r\nclass App extends Component {\r\n     componentDidMount() {\r\n    this.props.onGetCurrentUser();\r\n  }\r\n  render() {\r\n    return (\r\n    <div className=\"App\">\r\n      <AppBar />\r\n      <Suspense fallback={<p>Loading</p>}>\r\n      <Switch>\r\n         <PublicRoute exact path=\"/\" component={HomeView} />\r\n           <PrivateRoute path=\"/contacts\" redirectTo=\"/login\" component={ContactsView}/>\r\n         <PublicRoute path=\"/register\" restricted redirectTo=\"/contacts\" component={RegistrationView} />\r\n        <PublicRoute path=\"/login\" restricted redirectTo=\"/contacts\"component={LoginView} />\r\n        </Switch>\r\n        </Suspense>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\n  const mapDispatchToProps = {\r\n  onGetCurrentUser: authOperations.getCurrentUser,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps) (App);\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store'\nimport { PersistGate } from 'redux-persist/es/integration/react'\n\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n         <Provider store={store.store}>\n      <PersistGate persistor={store.persistor}>\n         <BrowserRouter>\n          <App />\n          </BrowserRouter>\n        </PersistGate>\n      </Provider>\n      </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}